<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// speed
vx = 0;
vy = 0;
mspeed = 0;
accelGround = 3;
accelAir = 2;
accel = accelGround;
maxSpeed = 12;
frictGround = 0.7;
frictAir = 0.92;
frict = frictGround;
jumpSpeed = 24;

// gravity
grav = 2;
direction = 270;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var kLeft, kRight, kUp, kDown;

kLeft = keyboard_check(vk_left) || keyboard_check(ord('A'));
kRight = keyboard_check(vk_right) || keyboard_check(ord('D'));
kUp = keyboard_check(vk_up) || keyboard_check(ord('W'));
kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));

// Accelerate
if (kLeft) {
    if (mspeed &gt; -maxSpeed) mspeed -= accel;
    else mspeed = -maxSpeed;
}
else if (kRight) {
    if (mspeed &lt; maxSpeed) mspeed += accel;
    else mspeed = maxSpeed;
}
else {
    mspeed *= frict;
}

if (direction == 270 || direction == 90) {
    vx = mspeed;
}
else {
    vy = mspeed;
}

// Move based on speed
//vx += lengthdir_x(mspeed, direction + 90);
//vy += lengthdir_y(mspeed, direction + 90);

var gx = lengthdir_x(grav, direction);
var gy = lengthdir_y(grav, direction);

// Apply Gravity
vx += gx;
vy += gy;

if (OnGround(gx, gy)) {
    // tryna be jump?
    if (kUp) {
        // jump based on negative gravity
        vx -= lengthdir_x(jumpSpeed, direction);
        vy -= lengthdir_y(jumpSpeed, direction);
        show_debug_message("hello, lendirx: " + string(lengthdir_x(jumpSpeed, direction)));
    }
}
else {
}

// Horizontal Movement
repeat(abs(vx)) {
    if (!place_meeting(x + sign(vx), y, oSolid))
        x += sign(vx);
    else {
        if (vx &lt; 0) direction = 180;
        else direction = 0;
        vx = 0;
        break;
    }
}

// Vertical Movement
repeat(abs(vy)) {
    if (!place_meeting(x, y + sign(vy), oSolid))
        y += sign(vy);
    else {
        if (vy &lt; 0) direction = 90;
        else direction = 270;
        vy = 0;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
